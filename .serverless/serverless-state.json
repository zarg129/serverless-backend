{
  "service": {
    "service": "backend",
    "serviceObject": {
      "name": "backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "vpc": {
        "securityGroupIds": [
          "sg-043015e7ed6ce24bb"
        ],
        "subnetIds": [
          "subnet-0fa7459b5aa3668b8",
          "subnet-06090db2c1efae954"
        ]
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetRoutesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-dev-getRoutes"
            }
          },
          "AddRouteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-dev-addRoute"
            }
          },
          "DeleteRouteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-dev-deleteRoute"
            }
          },
          "UpdateRouteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-dev-updateRoute"
            }
          },
          "GetTransportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-dev-getTransport"
            }
          },
          "AddTransportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-dev-addTransport"
            }
          },
          "DeleteTransportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-dev-deleteTransport"
            }
          },
          "UpdateTransportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-dev-updateTransport"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-d15d1456-45f5-46b7-b330-6ffd1bf7f88a"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "GetRoutesLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "AddRouteLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteRouteLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateRouteLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetTransportLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "AddTransportLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteTransportLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateTransportLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GetRoutesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/backend.zip"
              },
              "Handler": "s_getRoutes.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "backend-dev-getRoutes",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_PORT": "3306",
                  "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
                  "DATABASE_NAME": "keiki",
                  "DATABASE_USER": "root",
                  "DATABASE_PASSWORD": "password"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetRoutesLogGroup"
            ]
          },
          "AddRouteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/backend.zip"
              },
              "Handler": "s_addRoute.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "backend-dev-addRoute",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_PORT": "3306",
                  "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
                  "DATABASE_NAME": "keiki",
                  "DATABASE_USER": "root",
                  "DATABASE_PASSWORD": "password"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "AddRouteLogGroup"
            ]
          },
          "DeleteRouteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/backend.zip"
              },
              "Handler": "s_deleteRoute.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "backend-dev-deleteRoute",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_PORT": "3306",
                  "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
                  "DATABASE_NAME": "keiki",
                  "DATABASE_USER": "root",
                  "DATABASE_PASSWORD": "password"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "DeleteRouteLogGroup"
            ]
          },
          "UpdateRouteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/backend.zip"
              },
              "Handler": "s_updateRoute.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "backend-dev-updateRoute",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_PORT": "3306",
                  "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
                  "DATABASE_NAME": "keiki",
                  "DATABASE_USER": "root",
                  "DATABASE_PASSWORD": "password"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "UpdateRouteLogGroup"
            ]
          },
          "GetTransportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/backend.zip"
              },
              "Handler": "s_getTransport.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "backend-dev-getTransport",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_PORT": "3306",
                  "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
                  "DATABASE_NAME": "keiki",
                  "DATABASE_USER": "root",
                  "DATABASE_PASSWORD": "password"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetTransportLogGroup"
            ]
          },
          "AddTransportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/backend.zip"
              },
              "Handler": "s_addTransport.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "backend-dev-addTransport",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_PORT": "3306",
                  "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
                  "DATABASE_NAME": "keiki",
                  "DATABASE_USER": "root",
                  "DATABASE_PASSWORD": "password"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "AddTransportLogGroup"
            ]
          },
          "DeleteTransportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/backend.zip"
              },
              "Handler": "s_deleteTransport.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "backend-dev-deleteTransport",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_PORT": "3306",
                  "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
                  "DATABASE_NAME": "keiki",
                  "DATABASE_USER": "root",
                  "DATABASE_PASSWORD": "password"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "DeleteTransportLogGroup"
            ]
          },
          "UpdateTransportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/backend.zip"
              },
              "Handler": "s_updateTransport.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "backend-dev-updateTransport",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_PORT": "3306",
                  "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
                  "DATABASE_NAME": "keiki",
                  "DATABASE_USER": "root",
                  "DATABASE_PASSWORD": "password"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "UpdateTransportLogGroup"
            ]
          },
          "GetRoutesLambdaVersionmQGnP2Hd4iiAcbkbn3iCwd1CJKyWRL8Vn2HuNmrE4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRoutesLambdaFunction"
              },
              "CodeSha256": "V2cJ1aDVwKzT5MROKs8Rd0aOOZvXVBd5GI+XQAW8rxw="
            }
          },
          "AddRouteLambdaVersionXhwP6FzzbHNADCsGXtxmWklkPMgK1A1ycSv1bqYcaec": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddRouteLambdaFunction"
              },
              "CodeSha256": "V2cJ1aDVwKzT5MROKs8Rd0aOOZvXVBd5GI+XQAW8rxw="
            }
          },
          "DeleteRouteLambdaVersionQL6HQmJcaVBJFOnNLZJHs8Jo6v4Y9KvUACWbBowSpA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteRouteLambdaFunction"
              },
              "CodeSha256": "V2cJ1aDVwKzT5MROKs8Rd0aOOZvXVBd5GI+XQAW8rxw="
            }
          },
          "UpdateRouteLambdaVersion7FjFuNHwVtT7oWL6Apk7RmRQi8qMPxn3qF9UYrnqEU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateRouteLambdaFunction"
              },
              "CodeSha256": "V2cJ1aDVwKzT5MROKs8Rd0aOOZvXVBd5GI+XQAW8rxw="
            }
          },
          "GetTransportLambdaVersionhScvnu5dgieCSejOssQMW9qn7mZU9TU1kk3JWNKc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTransportLambdaFunction"
              },
              "CodeSha256": "V2cJ1aDVwKzT5MROKs8Rd0aOOZvXVBd5GI+XQAW8rxw="
            }
          },
          "AddTransportLambdaVersionxJbS771RV6jVeLgv8r7DDVSLihTH1Jov0Revk3lhhg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddTransportLambdaFunction"
              },
              "CodeSha256": "V2cJ1aDVwKzT5MROKs8Rd0aOOZvXVBd5GI+XQAW8rxw="
            }
          },
          "DeleteTransportLambdaVersionmSRnjcTD1JLWiUYvqISs8H4oCDsFteXJG82bcmqDam8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTransportLambdaFunction"
              },
              "CodeSha256": "V2cJ1aDVwKzT5MROKs8Rd0aOOZvXVBd5GI+XQAW8rxw="
            }
          },
          "UpdateTransportLambdaVersioneobXPQ7Lbs2vWH4LLhMZj8xdVB9Prbc08ZEBQ3r9dE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTransportLambdaFunction"
              },
              "CodeSha256": "V2cJ1aDVwKzT5MROKs8Rd0aOOZvXVBd5GI+XQAW8rxw="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceRoutes": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "routes",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTransport": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "transport",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRoutesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,DELETE,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoutes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTransportOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,DELETE,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTransport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRoutesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoutes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRoutesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetRoutesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoutesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoutes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddRouteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddRouteLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoutesDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoutes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteRouteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteRouteLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoutesPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoutes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateRouteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateRouteLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTransportGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTransport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTransportLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTransportLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTransportPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTransport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddTransportLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddTransportLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTransportDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTransport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteTransportLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteTransportLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTransportPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTransport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateTransportLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateTransportLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1693041095620": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRoutesOptions",
              "ApiGatewayMethodTransportOptions",
              "ApiGatewayMethodRoutesGet",
              "ApiGatewayMethodRoutesPost",
              "ApiGatewayMethodRoutesDelete",
              "ApiGatewayMethodRoutesPatch",
              "ApiGatewayMethodTransportGet",
              "ApiGatewayMethodTransportPost",
              "ApiGatewayMethodTransportDelete",
              "ApiGatewayMethodTransportPatch"
            ]
          },
          "GetRoutesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRoutesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddRouteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddRouteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteRouteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteRouteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateRouteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateRouteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTransportLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTransportLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddTransportLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddTransportLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteTransportLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTransportLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateTransportLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTransportLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/backend-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "backend",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z/custom-resources.zip"
              },
              "FunctionName": "backend-dev-custom-resource-apigw-cw-role",
              "Handler": "api-gateway-cloud-watch-role/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs16.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "CWLSubFilterGetRoutesLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetRoutesLogGroup"
              }
            }
          },
          "CWLSubFilterAddRouteLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "AddRouteLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteRouteLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteRouteLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateRouteLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateRouteLogGroup"
              }
            }
          },
          "CWLSubFilterGetTransportLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetTransportLogGroup"
              }
            }
          },
          "CWLSubFilterAddTransportLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "AddTransportLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteTransportLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteTransportLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateTransportLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateTransportLogGroup"
              }
            }
          },
          "CWLSubFilterApiGatewayLogGroupUsEast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:d15d1456-45f5-46b7-b330-6ffd1bf7f88a#TPKnhTvs2JSN3HCYLH#backend#dev",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            },
            "Export": {
              "Name": "sls-backend-dev-EnterpriseLogAccessIamRole"
            }
          },
          "GetRoutesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRoutesLambdaVersionmQGnP2Hd4iiAcbkbn3iCwd1CJKyWRL8Vn2HuNmrE4"
            },
            "Export": {
              "Name": "sls-backend-dev-GetRoutesLambdaFunctionQualifiedArn"
            }
          },
          "AddRouteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddRouteLambdaVersionXhwP6FzzbHNADCsGXtxmWklkPMgK1A1ycSv1bqYcaec"
            },
            "Export": {
              "Name": "sls-backend-dev-AddRouteLambdaFunctionQualifiedArn"
            }
          },
          "DeleteRouteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteRouteLambdaVersionQL6HQmJcaVBJFOnNLZJHs8Jo6v4Y9KvUACWbBowSpA"
            },
            "Export": {
              "Name": "sls-backend-dev-DeleteRouteLambdaFunctionQualifiedArn"
            }
          },
          "UpdateRouteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateRouteLambdaVersion7FjFuNHwVtT7oWL6Apk7RmRQi8qMPxn3qF9UYrnqEU"
            },
            "Export": {
              "Name": "sls-backend-dev-UpdateRouteLambdaFunctionQualifiedArn"
            }
          },
          "GetTransportLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTransportLambdaVersionhScvnu5dgieCSejOssQMW9qn7mZU9TU1kk3JWNKc"
            },
            "Export": {
              "Name": "sls-backend-dev-GetTransportLambdaFunctionQualifiedArn"
            }
          },
          "AddTransportLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddTransportLambdaVersionxJbS771RV6jVeLgv8r7DDVSLihTH1Jov0Revk3lhhg"
            },
            "Export": {
              "Name": "sls-backend-dev-AddTransportLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTransportLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTransportLambdaVersionmSRnjcTD1JLWiUYvqISs8H4oCDsFteXJG82bcmqDam8"
            },
            "Export": {
              "Name": "sls-backend-dev-DeleteTransportLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTransportLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTransportLambdaVersioneobXPQ7Lbs2vWH4LLhMZj8xdVB9Prbc08ZEBQ3r9dE"
            },
            "Export": {
              "Name": "sls-backend-dev-UpdateTransportLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-backend-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      }
    },
    "plugins": [
      "serverless-plugin-typescript",
      "serverless-plugin-optimize",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "getRoutes": {
        "handler": "s_getRoutes.handler",
        "environment": {
          "DATABASE_PORT": "3306",
          "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
          "DATABASE_NAME": "keiki",
          "DATABASE_USER": "root",
          "DATABASE_PASSWORD": "password"
        },
        "events": [
          {
            "http": {
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "routes",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-dev-getRoutes",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetRoutesLambdaVersionmQGnP2Hd4iiAcbkbn3iCwd1CJKyWRL8Vn2HuNmrE4"
      },
      "addRoute": {
        "handler": "s_addRoute.handler",
        "environment": {
          "DATABASE_PORT": "3306",
          "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
          "DATABASE_NAME": "keiki",
          "DATABASE_USER": "root",
          "DATABASE_PASSWORD": "password"
        },
        "events": [
          {
            "http": {
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "routes",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-dev-addRoute",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "AddRouteLambdaVersionXhwP6FzzbHNADCsGXtxmWklkPMgK1A1ycSv1bqYcaec"
      },
      "deleteRoute": {
        "handler": "s_deleteRoute.handler",
        "environment": {
          "DATABASE_PORT": "3306",
          "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
          "DATABASE_NAME": "keiki",
          "DATABASE_USER": "root",
          "DATABASE_PASSWORD": "password"
        },
        "events": [
          {
            "http": {
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "routes",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-dev-deleteRoute",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteRouteLambdaVersionQL6HQmJcaVBJFOnNLZJHs8Jo6v4Y9KvUACWbBowSpA"
      },
      "updateRoute": {
        "handler": "s_updateRoute.handler",
        "environment": {
          "DATABASE_PORT": "3306",
          "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
          "DATABASE_NAME": "keiki",
          "DATABASE_USER": "root",
          "DATABASE_PASSWORD": "password"
        },
        "events": [
          {
            "http": {
              "method": "patch",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "routes",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-dev-updateRoute",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateRouteLambdaVersion7FjFuNHwVtT7oWL6Apk7RmRQi8qMPxn3qF9UYrnqEU"
      },
      "getTransport": {
        "handler": "s_getTransport.handler",
        "environment": {
          "DATABASE_PORT": "3306",
          "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
          "DATABASE_NAME": "keiki",
          "DATABASE_USER": "root",
          "DATABASE_PASSWORD": "password"
        },
        "events": [
          {
            "http": {
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "transport",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-dev-getTransport",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetTransportLambdaVersionhScvnu5dgieCSejOssQMW9qn7mZU9TU1kk3JWNKc"
      },
      "addTransport": {
        "handler": "s_addTransport.handler",
        "environment": {
          "DATABASE_PORT": "3306",
          "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
          "DATABASE_NAME": "keiki",
          "DATABASE_USER": "root",
          "DATABASE_PASSWORD": "password"
        },
        "events": [
          {
            "http": {
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "transport",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-dev-addTransport",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "AddTransportLambdaVersionxJbS771RV6jVeLgv8r7DDVSLihTH1Jov0Revk3lhhg"
      },
      "deleteTransport": {
        "handler": "s_deleteTransport.handler",
        "environment": {
          "DATABASE_PORT": "3306",
          "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
          "DATABASE_NAME": "keiki",
          "DATABASE_USER": "root",
          "DATABASE_PASSWORD": "password"
        },
        "events": [
          {
            "http": {
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "transport",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-dev-deleteTransport",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteTransportLambdaVersionmSRnjcTD1JLWiUYvqISs8H4oCDsFteXJG82bcmqDam8"
      },
      "updateTransport": {
        "handler": "s_updateTransport.handler",
        "environment": {
          "DATABASE_PORT": "3306",
          "DATABASE_HOST": "keiki-backend-service.calwemx7l5xi.us-east-1.rds.amazonaws.com",
          "DATABASE_NAME": "keiki",
          "DATABASE_USER": "root",
          "DATABASE_PASSWORD": "password"
        },
        "events": [
          {
            "http": {
              "method": "patch",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "transport",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-dev-updateTransport",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateTransportLambdaVersioneobXPQ7Lbs2vWH4LLhMZj8xdVB9Prbc08ZEBQ3r9dE"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "zarg33",
      "app": "backend",
      "service": "backend",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "app": "backend",
    "org": "zarg33",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "d15d1456-45f5-46b7-b330-6ffd1bf7f88a",
    "appUid": "TPKnhTvs2JSN3HCYLH",
    "artifact": "/Users/dyachenkodmitro/Desktop/keiki/backend/.build/.serverless/backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/backend/dev/1693041173549-2023-08-26T09:12:53.549Z",
    "artifact": "backend.zip"
  }
}